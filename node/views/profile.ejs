<div class="row justify-content-center">
    <div class="col-md-8">
        <h1 class="mb-4 text-center">User Profile</h1>
        <div id="profile-content" style="display:none;">
            <div class="card shadow-sm mb-4">
                <div class="card-body text-center">
                    <img id="userPicture" src="" alt="Profile Picture" class="img-fluid rounded-circle mb-3" style="max-width: 150px;">
                    <h2 id="userNickname" class="card-title mb-3"></h2>
                    <p class="card-text mb-2">Organization: <span id="orgName" class="fw-bold"></span></p>
                    <p id="userEmail" class="card-text text-muted mb-2"></p>
                    <p id="emailVerified" class="card-text mb-3"></p>
                    <div id="userRoles" class="mb-3"></div>
                </div>
            </div>

            <div id="apiKeyManagement" class="card shadow-sm mb-4">
                <div class="card-body">
                    <h3 class="card-title mb-3">API Key Management</h3>
                    <button id="createApiKey" class="btn btn-primary rounded-pill mb-3 me-2">Create API Key</button>
                    <button id="listApiKeys" class="btn btn-outline-secondary rounded-pill mb-3">List API Keys</button>
                    <div id="apiKeyList" class="mt-3"></div>
                </div>
            </div>

            <div id="deviceManagement" class="card shadow-sm">
                <div class="card-body">
                    <h3 class="card-title mb-3">Device Management</h3>
                    <button id="listDevices" class="btn btn-primary rounded-pill mb-3">List Devices</button>
                    <div id="deviceList" class="mt-3"></div>
                </div>
            </div>
        </div>

        <div id="login-prompt" style="display:none;" class="text-center">
            <p class="mb-3">Please log in to view your profile.</p>
            <button id="loginButton" class="btn btn-primary rounded-pill px-4">Log In</button>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', async () => {
        if (window.auth0Client) {
            const isAuthenticated = await window.auth0Client.isAuthenticated();
            if (isAuthenticated) {
                document.getElementById('profile-content').style.display = 'block';
                document.getElementById('login-prompt').style.display = 'none';
                await loadUserProfile();
                setupApiKeyManagement();
                setupDeviceManagement();
            } else {
                document.getElementById('profile-content').style.display = 'none';
                document.getElementById('login-prompt').style.display = 'block';
            }
        }
    });
    
    async function loadUserProfile() {
        try {
            const token = await window.auth0Client.getTokenSilently();
            const response = await fetch('http://localhost:8000/user_info', {
                headers: {
                    Authorization: `Bearer ${token}`
                }
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const userData = await response.json();
            console.log('User data received:', userData);
    
            document.getElementById('userNickname').textContent = userData.name || 'No name provided';
            document.getElementById('userEmail').textContent = userData.user_id;
            document.getElementById('orgName').textContent = userData.org_name || 'Not assigned';
            
            const rolesContainer = document.getElementById('userRoles');
            rolesContainer.innerHTML = '';
            userData.roles.forEach(role => {
                const badge = document.createElement('span');
                badge.className = `badge ${role.toLowerCase() === 'admin' ? 'bg-warning text-dark' : 'bg-secondary'} me-2`;
                badge.textContent = role;
                rolesContainer.appendChild(badge);
            });
    
            const user = await window.auth0Client.getUser();
            document.getElementById('userPicture').src = user.picture || '';
            document.getElementById('emailVerified').textContent = `Email verified: ${user.email_verified ? 'Yes' : 'No'}`;
        } catch (error) {
            console.error('Error loading user profile:', error);
            alert('Failed to load user profile. Please try again.');
        }
    }
    
    function setupApiKeyManagement() {
        document.getElementById('createApiKey').addEventListener('click', createApiKey);
        document.getElementById('listApiKeys').addEventListener('click', listApiKeys);
    }
    
    function setupDeviceManagement() {
        document.getElementById('listDevices').addEventListener('click', listDevices);
    }
    
    async function createApiKey() {
        try {
            const token = await window.auth0Client.getTokenSilently();
            const response = await fetch('http://localhost:8000/api-keys', {
                method: 'POST',
                headers: {
                    Authorization: `Bearer ${token}`
                }
            });
            const data = await response.json();
            alert(`New API Key created: ${data.api_key}`);
            listApiKeys();
        } catch (error) {
            console.error('Error creating API key:', error);
            alert('Failed to create API key. Please try again.');
        }
    }
    
    async function listApiKeys() {
        try {
            const token = await window.auth0Client.getTokenSilently();
            const response = await fetch('http://localhost:8000/api-keys', {
                headers: {
                    Authorization: `Bearer ${token}`
                }
            });
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();
            const apiKeyList = document.getElementById('apiKeyList');
            apiKeyList.innerHTML = '<h4>API Keys:</h4>';
            data.api_keys.forEach(key => {
                const keyElement = document.createElement('p');
                keyElement.textContent = `${key.key} (Created: ${new Date(key.created_at).toLocaleString()})`;
                const deleteButton = document.createElement('button');
                deleteButton.textContent = 'Delete';
                deleteButton.className = 'btn btn-danger btn-sm ml-2';
                deleteButton.onclick = () => deleteApiKey(key.id);
                keyElement.appendChild(deleteButton);
                apiKeyList.appendChild(keyElement);
            });
        } catch (error) {
            console.error('Error listing API keys:', error);
            alert('Failed to list API keys. Please try again.');
        }
    }
    
    async function deleteApiKey(keyId) {
        try {
            const token = await window.auth0Client.getTokenSilently();
            const response = await fetch(`http://localhost:8000/api-keys/${keyId}`, {
                method: 'DELETE',
                headers: {
                    Authorization: `Bearer ${token}`
                }
            });
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            alert('API Key deleted successfully');
            listApiKeys();
        } catch (error) {
            console.error('Error deleting API key:', error);
            alert('Failed to delete API key. Please try again.');
        }
    }
    
    async function listDevices() {
        try {
            const token = await window.auth0Client.getTokenSilently();
            const response = await fetch('http://localhost:8000/devices', {
                headers: {
                    Authorization: `Bearer ${token}`
                }
            });
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();
            const deviceList = document.getElementById('deviceList');
            deviceList.innerHTML = '<h4>Devices:</h4>';
            data.devices.forEach(device => {
                const deviceElement = document.createElement('p');
                deviceElement.textContent = `UUID: ${device.uuid}, IP: ${device.internal_ip}, Last seen: ${new Date(device.last_seen).toLocaleString()}`;
                deviceList.appendChild(deviceElement);
            });
        } catch (error) {
            console.error('Error listing devices:', error);
            alert('Failed to list devices. Please try again.');
        }
    }
    </script>